Decent Sampler Preset Updater
This program is designed to streamline the process of updating Decent Sampler presets (.dspreset files). It allows you to easily:
Update background, knob, and slider images: Specify the new image file names and the program will update the image paths within the preset file.
Modify instrument tuning: Adjust the tuning of specific notes to match exotic scales (makam). Enter the tuning values for each note you want to modify.
Requirements
Python 3.x
Tkinter library (usually included by default in Python installations)
Installation
Save the script (e.g., modern_preset_updater.py)
Open a terminal or command prompt and navigate to the directory where you saved the script.
Run the script using the following command:
Bash
python modern_preset_updater.py

Using the Updater
The program will launch a graphical user interface (GUI) window.
Select a preset file: Click the "Browse" button next to the "Select Preset File" label and choose the .dspreset file you want to update.
Update image file names (optional): Enter the desired file names for the background image, knob image, and slider image in their respective fields.
If you don't specify a new image name for a particular image, the existing image will be retained.
Image format (optional): Choose the format for the new images (PNG or JPG) from the radio button options.
Update tuning values (optional): In the "Note Selection" section, enter the corresponding tuning values for the notes you want to adjust. You can leave any notes blank to keep their existing tuning.
Instrument name: Enter a name for the updated instrument in the "Decent Sampler Instrument Name" field. This will be used for the filename of the saved preset.
Click "Update" to apply the changes. The program will update the preset file with the specified modifications and save it as a new file with the instrument name you provided.
Error Handling
The program will display an error message if you don't select a preset file or if there are any issues saving the updated file.
Additional Notes
Make sure the new image files are placed in a directory accessible to the program.
You can create a folder named "Images" within the same directory as the script to store your image files.
The program will update the image paths within the preset file to point to the new locations in the "Images" folder.
This README provides a comprehensive overview of the Decent Sampler Preset Updater's functionalities and usage instructions. Feel free to reach out if you have any further questions.

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import re
import os
import sys


class ModernPresetUpdaterGUI:
   def __init__(self):
       self.root = tk.Tk()
       self.root.title("Decent Sampler Preset Updater")
      
       # Set the background color to dark grey for the entire window
       dark_grey = '#333333'
       self.root.configure(bg=dark_grey)


       # Variables
       self.file_path = None
       self.bg_image = tk.StringVar()
       self.knob_image = tk.StringVar()
       self.slider_image = tk.StringVar()
       self.instrument_name = tk.StringVar()
       self.image_format = tk.StringVar(value="png")  # Default to PNG
       self.note_values = {}  # Dictionary to store note entries


       # Apply the dark grey background style
       self.setup_styles(dark_grey)


       # Select .dspreset file at startup
       self.select_file()


       # Create main container and interface
       container = ttk.Frame(self.root, style='Main.TFrame')
       container.pack(fill="both", expand=True, padx=20, pady=20)
       self.create_editor_panel(container)


   def setup_styles(self, bg_color):
       style = ttk.Style()
       style.configure('Main.TFrame', background=bg_color)
       style.configure('Panel.TFrame', background=bg_color)
       style.configure('Header.TLabel', font=('Segoe UI', 12), background=bg_color, foreground='white')
       style.configure('Dark.TEntry', fieldbackground='#444444', foreground='white')
       style.configure('Dark.TRadiobutton', background=bg_color, foreground='white', font=('Segoe UI', 10))
       style.configure('Control.TButton', font=('Segoe UI', 10), padding=5)


   def select_file(self):
       # Open file dialog to select the .dspreset file
       file_path = filedialog.askopenfilename(filetypes=[("Decent Sampler Preset", "*.dspreset")])
       if file_path:
           self.file_path = file_path
       else:
           messagebox.showerror("Error", "No file selected. Exiting.")
           self.root.destroy()


   def create_editor_panel(self, container):
       panel = ttk.Frame(container, style='Panel.TFrame', padding=20)
       panel.pack(fill='both', expand=True)


       # Image File Name
       ttk.Label(panel, text="Image File Name", style='Header.TLabel').pack(anchor='w')
       image_entry = ttk.Entry(panel, textvariable=self.bg_image, style='Dark.TEntry')
       image_entry.pack(fill='x', pady=(0, 10))
       image_entry.bind("<KeyRelease>", self.auto_populate_instrument_name)


       # Knob File Name
       ttk.Label(panel, text="Knob File Name", style='Header.TLabel').pack(anchor='w')
       knob_entry = ttk.Entry(panel, textvariable=self.knob_image, style='Dark.TEntry')
       knob_entry.pack(fill='x', pady=(0, 10))


       # Slider File Name
       ttk.Label(panel, text="Slider File Name", style='Header.TLabel').pack(anchor='w')
       slider_entry = ttk.Entry(panel, textvariable=self.slider_image, style='Dark.TEntry')
       slider_entry.pack(fill='x', pady=(0, 10))


       # Image Format
       ttk.Label(panel, text="Image Format", style='Header.TLabel').pack(anchor='w')
       format_frame = ttk.Frame(panel, style='Panel.TFrame')
       format_frame.pack(fill='x', pady=(0, 15))
       ttk.Radiobutton(format_frame, text="PNG", variable=self.image_format, value="png", style='Dark.TRadiobutton').pack(side='left', padx=(0, 20))
       ttk.Radiobutton(format_frame, text="JPG", variable=self.image_format, value="jpg", style='Dark.TRadiobutton').pack(side='left')


       # Note Selection
       ttk.Label(panel, text="Note Selection", style='Header.TLabel').pack(anchor='w')
       notes_frame = ttk.Frame(panel, style='Panel.TFrame')
       notes_frame.pack(fill='x', pady=(0, 15))
       notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']
       for note in notes:
           note_frame = ttk.Frame(notes_frame, style='Panel.TFrame')
           note_frame.pack(fill='x', pady=1)
           ttk.Label(note_frame, text=note, style='Header.TLabel', width=3).pack(side='left')
           entry = ttk.Entry(note_frame, style='Dark.TEntry', width=10)
           entry.pack(side='left', fill='x', expand=True)
           self.note_values[note] = entry


       # Instrument Name
       ttk.Label(panel, text="Decent Sampler Instrument Name", style='Header.TLabel').pack(anchor='w')
       instrument_entry = ttk.Entry(panel, textvariable=self.instrument_name, style='Dark.TEntry')
       instrument_entry.pack(fill='x', pady=(0, 15))


       # Buttons
       button_frame = ttk.Frame(panel, style='Panel.TFrame')
       button_frame.pack(fill='x', pady=(10, 0))
       ttk.Button(button_frame, text="Cancel", style='Control.TButton', command=self.root.destroy).pack(side='left', padx=5)
       ttk.Button(button_frame, text="Update", style='Control.TButton', command=self.update_preset).pack(side='left', padx=5)


   def auto_populate_instrument_name(self, event):
       if self.bg_image.get():
           self.instrument_name.set(self.bg_image.get())
       else:
           self.instrument_name.set("")


   def get_note_values(self) -> dict:
       return {note: entry.get() for note, entry in self.note_values.items() if entry.get().strip()}


   def update_bgImage(self, content, new_image_name):
       # Pattern to find <ui> tag and insert/update bgImage attribute
       pattern = r'(<ui\s)([^>]*)(>)'
      
       # Function to add or update bgImage attribute
       def add_or_update_bg_image(match):
           tag_start = match.group(1)
           attributes = match.group(2)
           tag_end = match.group(3)
          
           # If bgImage exists, update it; otherwise, add it to the attributes
           if 'bgImage=' in attributes:
               # Update existing bgImage value
               attributes = re.sub(r'bgImage="[^"]*"', f'bgImage="Images/{new_image_name}"', attributes)
           else:
               # Add bgImage attribute if it doesn't exist
               attributes = f'bgImage="Images/{new_image_name}" ' + attributes
              
           return f"{tag_start}{attributes}{tag_end}"


       # Apply the add_or_update_bg_image function to the <ui> tag
       updated_content = re.sub(pattern, add_or_update_bg_image, content)
       return updated_content


   def update_customSkinImage(self, content, image_name, type_name):
       # Update customSkinImage attribute based on type (knob or slider)
       # Matches customSkinImage="Images/knob_xxxxx.png" or customSkinImage="Images/slider_xxxxx.png"
       pattern = rf'(customSkinImage="Images/{type_name}_[^"]*")'
      
       # Function to replace customSkinImage with the new image name
       def replace_image_name(match):
           return f'customSkinImage="Images/{type_name}_{image_name}.png"'


       # Apply the replace_image_name function to update the specified type
       updated_content = re.sub(pattern, replace_image_name, content)
       return updated_content


   def update_tuning(self, content, tuning_dict):
       # Update each note tuning in the file content
       for note, tuning_value in tuning_dict.items():
           note_escaped = re.escape(note)
           pattern = rf'(<[^>]+name="[^"]*?_{note_escaped}(\d+)?_.*?"[^>]*?)(\s*/?>)'


           # Function to add or update tuning
           def add_tuning(match):
               tag_content = match.group(1)
               closing = match.group(3)
               if 'tuning="' not in tag_content:
                   return f'{tag_content} tuning="{tuning_value}"{closing}'
               else:
                   return re.sub(r'tuning="[^"]*"', f'tuning="{tuning_value}"', match.group(0))


           # Apply tuning updates
           content = re.sub(pattern, add_tuning, content)
       return content


   def update_preset(self):
       if not self.file_path:
           messagebox.showerror("Error", "Please select a .dspreset file to update.")
           return
       if not self.bg_image.get() or not self.instrument_name.get():
           messagebox.showerror("Error", "Please complete all required fields (Image File Name and Instrument Name).")
           return


       # New image file name with extension
       new_image_name = f"{self.bg_image.get()}.{self.image_format.get()}"
       knob_image_name = self.knob_image.get().strip()
       slider_image_name = self.slider_image.get().strip()
       tuning_dict = self.get_note_values()


       try:
           # Read the file content
           with open(self.file_path, "r", encoding="utf-8") as file:
               content = file.read()


           # Update bgImage, knobImage, and sliderImage if provided
           content = self.update_bgImage(content, new_image_name)
           if knob_image_name:
               content = self.update_customSkinImage(content, knob_image_name, "knob")
           if slider_image_name:
               content = self.update_customSkinImage(content, slider_image_name, "slider")


           # Update tuning values
           content = self.update_tuning(content, tuning_dict)


           # Save the updated content back to a new file
           file_dir, file_name = os.path.split(self.file_path)
           updated_file_name = f"{self.instrument_name.get()}.dspreset"
           updated_file_path = os.path.join(file_dir, updated_file_name)


           with open(updated_file_path, "w", encoding="utf-8") as file:
               file.write(content)


           messagebox.showinfo("Success", f"Preset updated and saved as {updated_file_name}")
       except Exception as e:
           messagebox.showerror("Error", f"Failed to save the updated preset: {str(e)}")


def main():
   gui = ModernPresetUpdaterGUI()
   gui.root.mainloop()


if __name__ == '__main__':
   main()
